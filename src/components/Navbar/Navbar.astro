---
const logoImage = "/assets/imagenes/logos/servadec.png";
const scrolledLogoImage = "/assets/imagenes/logos/servadec.png";

const menuItems = [
  { label: "Inicio", href: "/" },
  {
    label: "Servicios",
    submenu: [
      { label: "Administración", href: "#admin" },
      { label: "Contabilidad", href: "#contabilidad" },
    ],
  },
  { label: "Nosotros", href: "#planes" },
  { label: "Contacto", href: "#contacto" },
];

const mobileImage =
  "https://images.unsplash.com/photo-1600585154340-be6161a56a0c?fit=crop&w=800&q=80";

const menuConfig = {
  initialBackgroundColor: "bg-transparent",
  scrolledBackgroundColor: "bg-white",
  darkModeBackgroundColor: "bg-gray-900",
  scrollThreshold: 100,
};
---

<header
  id="main-header"
  class="fixed top-0 left-0 w-full z-50 shadow-none transition-all duration-300"
  data-initial-bg={menuConfig.initialBackgroundColor}
  data-scrolled-bg={menuConfig.scrolledBackgroundColor}
  data-dark-bg={menuConfig.darkModeBackgroundColor}
  data-scroll-threshold={menuConfig.scrollThreshold}
  data-logo={logoImage}
  data-logo-scrolled={scrolledLogoImage}
  data-text-initial="text-white"
  data-text-scrolled="text-gray-800"
  data-text-dark="text-white"
>
  <div class="max-w-7xl mx-auto px-4 py-4 flex justify-between items-center">
    <a href="/" class="flex items-center gap-2 menu-link">
      <img
        id="main-logo"
        src={logoImage}
        alt="Logo"
        class="h-8 md:h-10 object-contain transition duration-300"
      />
    </a>

    <!-- Menú Desktop -->
    <nav class="hidden md:flex space-x-6 items-center">
      {
        menuItems.map((item) => (
          <div>
            <a
              href={item.href || "#"}
              class="menu-link font-medium transition duration-300"
            >
              {item.label}
            </a>
          </div>
        ))
      }
    </nav>

    <!-- Botón menú móvil -->
    <button
      id="menu-btn"
      class="md:hidden text-2xl transition-all duration-300 transform hover:scale-110 menu-icon"
    >
      <i class="fas fa-bars transition-transform duration-300"></i>
    </button>
  </div>

  <!-- Overlay -->
  <div
    id="mobile-overlay"
    class="fixed inset-0 z-40 pointer-events-none invisible backdrop-blur-sm bg-black/40 opacity-0 transition-all duration-300"
  >
    <aside
      id="mobile-menu"
      class="pointer-events-auto absolute right-0 top-0 h-auto max-h-[90vh] w-full bg-white dark:bg-gray-900 shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out overflow-y-auto rounded-bl-xl"
    >
      <div
        class="flex justify-between items-center px-4 py-4 border-b border-gray-200 dark:border-gray-700"
      >
        <a href="/" class="flex items-center gap-2 menu-link">
          <img
            id="mobile-logo"
            src={logoImage}
            alt="Logo"
            class="h-8 md:h-10 object-contain transition duration-300"
          />
        </a>
        <button
          id="menu-close"
          class="text-2xl transition-all duration-300 transform hover:rotate-90 menu-icon"
        >
          <i class="fas fa-times transition-transform duration-300"></i>
        </button>
      </div>

      <img
        src={mobileImage}
        alt="Menú"
        class="w-full h-40 object-cover rounded-b-xl"
      />

      <nav
        id="mobile-links"
        class="flex flex-col divide-y divide-gray-200 dark:divide-gray-700 text-gray-900 dark:text-white"
      >
        {
          menuItems.map((item) => (
            <div>
              {item.submenu ? (
                <details class="group">
                  <summary class="flex justify-between items-center px-6 py-4 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800">
                    <span>{item.label}</span>
                    <i class="fas fa-chevron-down group-open:rotate-180 transition-transform duration-300" />
                  </summary>
                  <div class="flex flex-col text-sm">
                    {item.submenu.map((sub) => (
                      <a href={sub.href} class="px-8 py-2 transition menu-link">
                        {sub.label}
                      </a>
                    ))}
                  </div>
                </details>
              ) : (
                <a
                  href={item.href}
                  class="px-6 py-4 text-lg font-medium hover:bg-gray-100 dark:hover:bg-gray-800 transition block menu-link"
                >
                  {item.label}
                </a>
              )}
            </div>
          ))
        }
      </nav>
    </aside>
  </div>

  <script is:inline>
    const menuBtn = document.getElementById("menu-btn");
    const menuClose = document.getElementById("menu-close");
    const overlay = document.getElementById("mobile-overlay");
    const menu = document.getElementById("mobile-menu");
    const header = document.getElementById("main-header");
    const menuLinks = document.querySelectorAll(".menu-link");
    const menuIcons = document.querySelectorAll(".menu-icon");
    const mainLogo = document.getElementById("main-logo");
    const mobileLogo = document.getElementById("mobile-logo");

    const initialBg = header.dataset.initialBg;
    const scrolledBg = header.dataset.scrolledBg;
    const darkBg = header.dataset.darkBg;
    const scrollThreshold = parseInt(header.dataset.scrollThreshold);
    const logoSrc = header.dataset.logo;
    const logoScrolledSrc = header.dataset.logoScrolled;
    const textInitial = header.dataset.textInitial;
    const textScrolled = header.dataset.textScrolled;
    const textDark = header.dataset.textDark;

    let lastScrollY = window.scrollY;
    let scrollingTimer;
    let isMenuOpen = false;

    header.classList.add(initialBg);
    if (document.documentElement.classList.contains("dark")) {
      header.classList.remove(initialBg);
      header.classList.add(darkBg);
      mainLogo.src = logoScrolledSrc;
      mobileLogo.src = logoScrolledSrc;
    }

    const updateHeaderBackground = () => {
      const currentScrollY = window.scrollY;
      const isDarkMode = document.documentElement.classList.contains("dark");

      // LOGOS
      if (mainLogo) {
        mainLogo.src =
          isDarkMode || currentScrollY > scrollThreshold
            ? logoScrolledSrc
            : logoSrc;
      }

      // TEXTOS
      menuLinks.forEach((link) => {
        link.classList.remove(textInitial, textScrolled, textDark);
        if (isDarkMode) link.classList.add(textDark);
        else if (currentScrollY > scrollThreshold)
          link.classList.add(textScrolled);
        else link.classList.add(textInitial);
      });

      // ICONOS
      menuIcons.forEach((icon) => {
        icon.classList.remove(textInitial, textScrolled, textDark);
        if (isDarkMode) icon.classList.add(textDark);
        else if (currentScrollY > scrollThreshold)
          icon.classList.add(textScrolled);
        else icon.classList.add(textInitial);
      });

      // BACKGROUND
      if (isDarkMode) {
        header.classList.add(darkBg);
        header.classList.remove(initialBg, scrolledBg);
        return;
      }

      if (currentScrollY > scrollThreshold) {
        header.classList.add(scrolledBg, "shadow-sm");
        header.classList.remove(initialBg, "shadow-none");
      } else {
        header.classList.add(initialBg, "shadow-none");
        header.classList.remove(scrolledBg, "shadow-sm");
      }
    };

    const openMenu = () => {
      overlay.classList.remove("invisible");
      overlay.classList.add("pointer-events-auto", "opacity-100");
      overlay.classList.remove("pointer-events-none");
      menu.classList.remove("translate-x-full");
      document.body.classList.add("overflow-hidden");

      if (mobileLogo) mobileLogo.src = logoScrolledSrc;
      isMenuOpen = true;
    };

    const closeMenu = () => {
      overlay.classList.remove("opacity-100");
      menu.classList.add("translate-x-full");

      setTimeout(() => {
        overlay.classList.add("invisible");
        overlay.classList.remove("pointer-events-auto");
        overlay.classList.add("pointer-events-none");
        document.body.classList.remove("overflow-hidden");
      }, 300);

      if (mobileLogo) mobileLogo.src = logoSrc;
      isMenuOpen = false;
    };

    const handleScroll = () => {
      if (isMenuOpen) {
        header.classList.remove("-translate-y-full");
        return;
      }

      const currentScrollY = window.scrollY;
      updateHeaderBackground();

      if (currentScrollY < scrollThreshold) {
        header.classList.remove("-translate-y-full");
        return;
      }

      if (currentScrollY > lastScrollY) {
        header.classList.add("-translate-y-full");
      } else {
        header.classList.remove("-translate-y-full");
      }

      lastScrollY = currentScrollY;
      clearTimeout(scrollingTimer);
      scrollingTimer = setTimeout(() => {
        header.classList.remove("-translate-y-full");
      }, 1000);
    };

    const handleLinkClick = (e) => {
      if (isMenuOpen) {
        const href = e.currentTarget.getAttribute("href");
        const isAnchor = href && href.startsWith("#");

        closeMenu();

        if (isAnchor) {
          e.preventDefault();
          setTimeout(() => {
            const targetElement = document.querySelector(href);
            if (targetElement) {
              targetElement.scrollIntoView({ behavior: "smooth" });
            } else {
              window.location.hash = href;
            }
          }, 310);
        }
      }
    };

    menuBtn?.addEventListener("click", openMenu);
    menuClose?.addEventListener("click", closeMenu);
    menuLinks.forEach((link) => {
      link.addEventListener("click", handleLinkClick);
    });
    overlay?.addEventListener("click", (e) => {
      if (!menu.contains(e.target) && e.target !== menu) closeMenu();
    });
    window.addEventListener("scroll", handleScroll, { passive: true });
    updateHeaderBackground();

    if (window.matchMedia) {
      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", updateHeaderBackground);
    }
  </script>
</header>
