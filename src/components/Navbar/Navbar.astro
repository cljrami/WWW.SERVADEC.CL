---
interface Props {
  logoImg?: string;
  whatsAppNumber?: string;
  menuItems?: Array<{ label: string; href: string; isExternal?: boolean }>;
}

const {
  whatsAppNumber = "1234567890",
  logoImg = "assets/imagenes/logos/servadec.png",
  menuItems = [
    { label: "Inicio", href: "/" },
    { label: "Servicios", href: "/servicios" },
    { label: "Contacto", href: "/contacto" },
  ],
} = Astro.props;
---

<header
  id="navbar"
  class="fixed w-full top-0 left-0 z-50 bg-white shadow-md transition-transform duration-300"
>
  <nav class="container mx-auto px-4 py-4 flex justify-between items-center">
    <!-- Logo -->
    <a href="/" class="flex items-center">
      <img
        src={logoImg || "/ruta-a-tu-logo.png"}
        alt="Logo"
        class="h-16 w-16"
      />
    </a>

    <!-- Botón menú móvil -->
    <button
      id="mobile-menu-button"
      class="md:hidden text-2xl text-black focus:outline-none cursor-pointer"
      aria-label="Menú"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6 transition-transform duration-300"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          id="menu-icon"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"></path>
        <path
          id="close-icon"
          class="hidden"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Menú en escritorio -->
    <div class="hidden md:flex items-center space-x-6">
      {
        menuItems.map((item) => (
          <a
            href={item.href}
            class="text-black hover:text-blue-600 text-sm transition-colors"
            target={item.isExternal ? "_blank" : undefined}
            rel={item.isExternal ? "noopener noreferrer" : undefined}
          >
            {item.label}
          </a>
        ))
      }
      <!-- Botón WhatsApp (SIEMPRE VISIBLE) -->
      <a
        href={`https://wa.me/${whatsAppNumber}`}
        target="_blank"
        rel="noopener noreferrer"
        class="flex items-center px-4 py-2 rounded-lg text-white bg-green-500 text-sm shadow-md"
      >
        <i class="fab fa-whatsapp pr-2 text-xl"></i> WhatsApp
      </a>
    </div>
  </nav>

  <!-- Menú móvil -->
  <div
    id="mobile-menu"
    class="md:hidden overflow-hidden max-h-0 opacity-0 transition-all duration-300 ease-in-out bg-white shadow-md"
  >
    <div class="flex flex-col space-y-4 p-4">
      {
        menuItems.map((item) => (
          <a
            href={item.href}
            class="text-black hover:text-blue-600 text-base transition-colors"
            target={item.isExternal ? "_blank" : undefined}
            rel={item.isExternal ? "noopener noreferrer" : undefined}
          >
            {item.label}
          </a>
        ))
      }
      <!-- Botón WhatsApp (Solo en móvil) -->
      <a
        href={`https://wa.me/${whatsAppNumber}`}
        target="_blank"
        rel="noopener noreferrer"
        class="flex items-center px-4 py-2 rounded-lg text-white bg-green-500 text-base shadow-md md:hidden"
      >
        <i class="fab fa-whatsapp pr-2 text-xl"></i> WhatsApp
      </a>
    </div>
  </div>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Obtener elementos
    const navbar = document.getElementById("navbar");
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuIcon = document.getElementById("menu-icon");
    const closeIcon = document.getElementById("close-icon");

    let isMenuOpen = false;
    let lastScrollY = window.scrollY;

    // Verificar que los elementos existen
    if (
      !navbar ||
      !mobileMenuButton ||
      !mobileMenu ||
      !menuIcon ||
      !closeIcon
    ) {
      console.error("No se encontraron algunos elementos del menú.");
      return;
    }

    // Función para abrir el menú móvil
    const openMobileMenu = () => {
      isMenuOpen = true;
      mobileMenu.style.maxHeight = `${mobileMenu.scrollHeight}px`;
      mobileMenu.style.opacity = "1";
      menuIcon.classList.add("hidden");
      closeIcon.classList.remove("hidden");
    };

    // Función para cerrar el menú móvil
    const closeMobileMenu = () => {
      isMenuOpen = false;
      mobileMenu.style.maxHeight = "0px";
      mobileMenu.style.opacity = "0";
      menuIcon.classList.remove("hidden");
      closeIcon.classList.add("hidden");
    };

    // Alternar menú móvil
    const toggleMobileMenu = () => {
      isMenuOpen ? closeMobileMenu() : openMobileMenu();
    };

    // Evento de click en el botón del menú móvil
    mobileMenuButton.addEventListener("click", toggleMobileMenu);

    // Cerrar menú si se hace clic fuera
    document.addEventListener("click", (event) => {
      const target = event.target as Node; // Asegurar que target es un Node

      if (!mobileMenu.contains(target) && !mobileMenuButton.contains(target)) {
        closeMobileMenu();
      }
    });

    // Cerrar menú si la pantalla es mayor a 768px
    window.addEventListener("resize", () => {
      if (window.innerWidth >= 768 && isMenuOpen) {
        closeMobileMenu();
      }
    });

    // Mostrar / ocultar navbar según scroll
    const updateNavbar = () => {
      if (isMenuOpen) return; // No ocultar si el menú está abierto

      if (window.scrollY > lastScrollY && window.scrollY > 50) {
        navbar.style.transform = "translateY(-100%)"; // Ocultar navbar
      } else {
        navbar.style.transform = "translateY(0)"; // Mostrar navbar
      }

      lastScrollY = window.scrollY;
    };

    // Evento de scroll para ocultar / mostrar navbar
    window.addEventListener("scroll", updateNavbar);
  });
</script>
