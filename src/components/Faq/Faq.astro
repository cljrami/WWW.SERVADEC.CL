---
interface FAQItem {
  question: string;
  answer: string;
}

interface Props {
  title?: string;
  items: FAQItem[];
}

const { title = "Preguntas Frecuentes", items = [] } = Astro.props;
---

<div class="w-full max-w-2xl mx-auto py-8 px-4 dark:bg-amber-100">
  {title && <h2 class="text-3xl font-bold text-center mb-8">{title}</h2>}

  <div class="space-y-3" data-faq-accordion>
    {
      items.map((item, index) => (
        <div
          class="border rounded-md overflow-hidden transition-all duration-200 shadow-md"
          data-faq-item
        >
          <button
            class="w-full flex justify-between items-center p-4 bg-gray-100 hover:bg-gray-200 transition-all duration-200"
            aria-expanded={index === 0 ? "true" : "false"}
            data-faq-trigger
          >
            <span class="text-lg font-medium text-left">{item.question}</span>
            <div
              class={`faq-icon transform transition-transform duration-300 ${index === 0 ? "rotate-180" : ""}`}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 9l-7 7-7-7"
                />
              </svg>
            </div>
          </button>
          <div
            class={`p-5 border-t bg-white transition-all duration-300 ${index === 0 ? "block" : "hidden"}`}
            data-faq-content
            set:html={item.answer}
          />
        </div>
      ))
    }
  </div>
</div>

<script>
  function setupFAQAccordion() {
    const accordionContainers = document.querySelectorAll(
      "[data-faq-accordion]"
    );

    accordionContainers.forEach((container) => {
      const items = container.querySelectorAll("[data-faq-item]");

      items.forEach((item) => {
        const trigger = item.querySelector("[data-faq-trigger]");
        const content = item.querySelector("[data-faq-content]");
        const icon = item.querySelector(".faq-icon");

        if (!trigger || !content || !icon) return;

        trigger.addEventListener("click", () => {
          const isExpanded = trigger.getAttribute("aria-expanded") === "true";

          // Cerrar todos los demÃ¡s
          items.forEach((otherItem) => {
            const otherTrigger = otherItem.querySelector("[data-faq-trigger]");
            const otherContent = otherItem.querySelector("[data-faq-content]");
            const otherIcon = otherItem.querySelector(".faq-icon");

            if (otherTrigger && otherContent && otherIcon) {
              otherTrigger.setAttribute("aria-expanded", "false");
              otherContent.classList.add("hidden");
              otherContent.classList.remove("block");
              otherIcon.classList.remove("rotate-180");
            }
          });

          // Si estaba cerrado, abrirlo
          if (!isExpanded) {
            trigger.setAttribute("aria-expanded", "true");
            content.classList.remove("hidden");
            content.classList.add("block");
            icon.classList.add("rotate-180");
          }
        });
      });
    });
  }

  document.addEventListener("astro:after-swap", setupFAQAccordion);
  document.addEventListener("DOMContentLoaded", setupFAQAccordion);
</script>
